/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.1.1/userguide/building_java_projects.html
 */

import net.masterthought.cucumber.ReportBuilder
import net.masterthought.cucumber.Configuration
buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "net.masterthought:cucumber-reporting:5.3.0"
        classpath "com.avast.gradle:gradle-docker-compose-plugin:0.13.0"
        classpath "com.github.spotbugs.snom:spotbugs-gradle-plugin:5.0.14"
    }
}

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    // IDE plugins to integrate our gradle java project to the IDE
    id 'idea'
    // Checkstyle plugin to enforce a coding standards
    id 'checkstyle'
}

apply plugin: 'docker-compose'

repositories {
    mavenCentral()
}

ext {
    cucumber = '6.4.0'
    selenium = '3.141.59'
    hamcrest = '2.2'
    spring = '2.3.2.RELEASE'
    lombok = '1.18.12'
}

dependencies {

    // Use TestNG framework, also requires calling test.useTestNG() below
    // testImplementation 'org.testng:testng:7.5'

    // Cucumber as testing framework for web application automation
    testImplementation "io.cucumber:cucumber-java:$cucumber"
    testImplementation "io.cucumber:cucumber-testng:$cucumber"
    testImplementation "io.cucumber:cucumber-spring:$cucumber"

    // Selenium as automation library
    testImplementation "org.seleniumhq.selenium:selenium-java:$selenium"
    testImplementation "org.seleniumhq.selenium:selenium-api:$selenium"

    // Hamcrest is a framework for writing matcher objects allowing ‘match’ rules to be defined declaratively
    testImplementation "org.hamcrest:hamcrest-library:$hamcrest"

    // Spring framework to support Dependency Injection (DI)
    testImplementation "org.springframework.boot:spring-boot-starter-web:$spring"
    testImplementation "org.springframework.boot:spring-boot-starter-test:$spring"

    // Lombok to substitute code by annotations for example, @Setter, @Getter and @Data
    // Lombok is a java library that automatically plugs into editor and build tools, spicing up the java.
    testImplementation "org.projectlombok:lombok:$lombok"
    testAnnotationProcessor "org.projectlombok:lombok:$lombok"
}

// Apply a specific Java toolchain to ease working on different environments.
/*java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}
*/
test {
    useTestNG()
    systemProperties(System.properties) // can be used for running a subset of scenarios
    scanForTestClasses = false
    testLogging.showStandardStreams = true
    systemProperty "file.encoding", "utf-8"
}

def generateReport() {
    File reportOutputDirectory = new File("$projectDir/build/test-report")
    reportOutputDirectory.deleteDir()

    def jsonReports = fileTree(dir: "build/test-results").include '**/*.json'.toString()
    List<String> jsonReportFiles = new ArrayList<String>()
    jsonReports.each { File file ->
        jsonReportFiles.add("$projectDir/build/test-results/${file.name}".toString())
    }

    String projectName = project.name
    Configuration configuration = new Configuration(reportOutputDirectory, projectName)
    configuration.addClassifications("Version", project.version)

    ReportBuilder reportBuilder = new ReportBuilder(jsonReportFiles, configuration)
    reportBuilder.generateReports()

    println("\nReport: file://" + reportOutputDirectory.getCanonicalPath() +
            "/cucumber-html-reports/overview-features.html")
}

task generateReport() {
    doLast {
        generateReport()
    }
}

test.finalizedBy generateReport // This line is saying to Gradle to execute the report task after the test execution

dockerCompose.isRequiredBy test

dockerCompose {
    useComposeFiles = ['../docker-compose.yml']
    scale = [firefox: 2, chrome: 2]
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

checkstyle {
    configFile = file("${rootDir}/checkstyle.xml")
}
checkstyleMain {
    source ='src/main/java'
}
checkstyleTest {
    source ='src/test/java'
}
